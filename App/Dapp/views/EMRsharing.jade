doctype html
html
  head
    title EMR-sharing Dashboard
    link(rel='stylesheet', href='stylesheets/EMRsharing.css')
    script(src='https://cdn.ethers.io/lib/ethers-5.2.umd.min.js' type='application/javascript')
    script(src='javascripts/abiScripts.js')
  body
    header
      nav
        ul
          li.home
            a(href='/EMRsharing') EMR-sharing
          li.link(style='float:right')
            a(href='/createIdentity') Create Identity
          li.link(style='float:right')
            a(href='/login') EMR-sharing-login
          li.link(style='float:right')
            a(href='/consentIdentity') Consent Identity
          li.link(style='float:right')
            a(href='/userModule') User module
          li.link(style='float:right')
            a(href='/') DID-Dashboard
    main
      .dashboard
        //- .user-info-box
        .container
          h2.user-info-title User Information
          p#user-info-message Please Login First.
          .user-info-details
            p.user-info-item
              span.user-info-label UserId: 
              span#userID #{userId}
            p.user-info-item
              span.user-info-label Role: 
              span#Role #{role}
            button#ReloadButton(type='button') Reload Page
        - for (var i = 0; i < 5; i++)
          - if (i == 0)
            - if (role === "patient")
              .container
                h2 AccessControl Instance Overview
                p The overview about your EMRsharing.
                pre#data
            - else
              .container-invisible
                h2 AccessControl Instance Overview
                p The overview about your EMRsharing.
          - else if (i == 1) // consent access
              -if (role === "patient")
                .container
                  h2 Consent Access or Revoke Access
                  p You can choose to Consent all level to access or only allow higher health-provider level to access
                  select#consentSelect(name='App')
                    option(value='' selected='') Choose the Organization
                    option(value='cgmh') 長庚醫院cgmh
                    option(value='chuh') 中國醫藥大學chuh
                    option(value='ntuh') 臺大醫院ntuh
                  &nbsp;
                  button#consentButton(type='button') Consent
                  &nbsp; &nbsp;
                  select#revokeSelect(name='App')
                    option(value='' selected='') Choose the Organization
                    option(value='cgmh') 長庚醫院cgmh
                    option(value='chuh') 中國醫藥大學chuh
                    option(value='ntuh') 臺大醫院ntuh
                  &nbsp;
                  button#revokeButton(type='button') Revoke
              -else 
                .container-invisible
                  h2 Consent Access or Revoke Access
                  p You can choose to Consent all level to access or only allow higher health-provider level to access
                  select#consentSelect(name='App')
                    option(value='' selected='') Choose the Organization
                    option(value='cgmh') 長庚醫院cgmh
                    option(value='chuh') 中國醫藥大學chuh
                    option(value='ntuh') 臺大醫院ntuh
                  &nbsp;
                  button#consentButton(type='button') Consent
                  &nbsp; &nbsp;
                  select#revokeSelect(name='App')
                    option(value='' selected='') Choose the Organization
                    option(value='cgmh') 長庚醫院cgmh
                    option(value='chuh') 中國醫藥大學chuh
                    option(value='ntuh') 臺大醫院ntuh
                  &nbsp;
                  button#revokeButton(type='button') Revoke
          - else if (i == 2) // Update instance and hash
            - if (role === "doctor") 
              .container
                h2 Update instance or Update hash
                p Upload the new instance or the updated hash value
                p NEED TO LOGIN with "doctor" ROLE!!!
                label(for='hospitalIdInput') hospitalId: 
                input#hospitalIdInput-1(type='text' name='hospitalIdInput-1' required='')
                br
                label(for='pointerInput') pointer: 
                input#pointerInput(type='text' name='pointerInput' required='')
                br
                label(for='hashInput') hash:
                input#hashInput-1(type='text' name='hashInput-1' required='')
                br
                button#updateInsatnceButton(type='button') Update instance
                br
                br
                label(for='hospitalIdInput') hospitalId: 
                input#hospitalIdInput-2(type='text' name='hospitalIdInput-2' required='')
                br
                label(for='hashInput') hash: 
                input#hashInput-2(type='text' name='hashInput-2' required='')
                br
                button#updateHashButton(type='button') Update hash
            - else
              .container-invisible
                h2 Update instance or Update hash
                p Upload the new instance or the updated hash value
                p NEED TO LOGIN with "doctor" ROLE!!!
                label(for='hospitalIdInput') hospitalId: 
                input#hospitalIdInput-1(type='text' name='hospitalIdInput-1' required='')
                br
                label(for='pointerInput') pointer: 
                input#pointerInput(type='text' name='pointerInput' required='')
                br
                label(for='hashInput') hash:
                input#hashInput-1(type='text' name='hashInput-1' required='')
                br
                button#updateInsatnceButton(type='button') Update instance
                br
                br
                label(for='hospitalIdInput') hospitalId: 
                input#hospitalIdInput-2(type='text' name='hospitalIdInput-2' required='')
                br
                label(for='hashInput') hash: 
                input#hashInput-2(type='text' name='hashInput-2' required='')
                br
                button#updateHashButton(type='button') Update hash
          - else if (i == 3) // Authorization
            -if (role === "doctor")
              .container
                h2 Authorization
                p Try to get the authorization from another hospital
                div#seperateDiv
                  div(style="display: inline-block; flex: 1;")
                    label(for='patientId') patientId: 
                    br
                    input#patientIdInput(type='text' name='patientId' required='')
                    br
                    label(for='requestHospitalId') requestHospitalId: 
                    input#requestHospitalIdInput(type='text' name='requestHospitalId' required='')
                    br
                    br
                    label(for='patientPublicKeyInput') patient_PublicKey: 
                    input#patientPublicKeyInput(type='text' name='patientPublicKeyInput' readonly='' required='')
                    br
                    label(for='patientSignatureInput') patientSignature: 
                    input#patientSignatureInput(type='text' name='patientSignatureInput' readonly='' required='')
                    br
                    button#patientConnectButton(type='button') Connect
                    &nbsp; &nbsp;
                    button#patientSignButton(type='button') Sign
                    br
                    br
                    label(for='doctorPublicKeyInput') doctor_PublicKey: 
                    input#doctorPublicKeyInput(type='text' name='doctorPublicKeyInput' readonly='' required='')
                    br
                    label(for='doctorSignatureInput') doctorSignature: 
                    input#doctorSignatureInput(type='text' name='doctorSignatureInput' readonly='' required='')
                    br 
                    button#doctorConnectButton(type='button') Connect
                    &nbsp; &nbsp;
                    button#doctorSignButton(type='button') Sign
                  div(style="flex: 1; display: flex; justify-content: center; align-items: center; height: 500px;")
                    button#authorizationButton(type='button') Authorization
            -else
              .container-invisible
                h2 Authorization
                p Try to get the authorization from another hospital
                div#seperateDiv
                  div(style="display: inline-block; flex: 1;")
                    label(for='patientId') patientId: 
                    br
                    input#patientIdInput(type='text' name='patientId' required='')
                    br
                    label(for='requestHospitalId') requestHospitalId: 
                    input#requestHospitalIdInput(type='text' name='requestHospitalId' required='')
                    br
                    br
                    label(for='patientPublicKeyInput') patient_PublicKey: 
                    input#patientPublicKeyInput(type='text' name='patientPublicKeyInput' readonly='' required='')
                    br
                    label(for='patientSignatureInput') patientSignature: 
                    input#patientSignatureInput(type='text' name='patientSignatureInput' readonly='' required='')
                    br
                    button#patientConnectButton(type='button') Connect
                    &nbsp; &nbsp;
                    button#patientSignButton(type='button') Sign
                    br
                    br
                    label(for='doctorPublicKeyInput') doctor_PublicKey: 
                    input#doctorPublicKeyInput(type='text' name='doctorPublicKeyInput' readonly='' required='')
                    br
                    label(for='doctorSignatureInput') doctorSignature: 
                    input#doctorSignatureInput(type='text' name='doctorSignatureInput' readonly='' required='')
                    br 
                    button#doctorConnectButton(type='button') Connect
                    &nbsp; &nbsp;
                    button#doctorSignButton(type='button') Sign
                  div(style="flex: 1; display: flex; justify-content: center; align-items: center; height: 500px;")
                    button#authorizationButton(type='button') Authorization
          - else
              .container 
                h2 Container #{i+1}
                p This is some sample text for Container #{i+1}.
      
    script.
      async function getACL(uid) {
        try {
          const response = await fetch('/EMRsharing/getACL', {
            method: 'POST', // or 'GET', 'PUT', etc.
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              userId: uid,
              // ...other data...
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          // console.log('Success:', data);
          // Render the data within the if (i == 0) block
          if (data["result"]) {
            const dataElement = document.getElementById("data");
            dataElement.textContent = JSON.stringify(data["result"], null, 2);
          }
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // getACL

      async function updateInstance(uid, _hospitalId, _pointer, _hash) {
        try {
          const response = await fetch('/EMRsharing/updateInstance', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              userId: uid,
              hospitalId: _hospitalId,
              pointer: _pointer,
              hash: _hash
              // ...other data...
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          console.log('Success:', data);
          alert(data["result"]["success"]);
          location.reload() ;
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // updateInstance()

      async function updateHash(uid, _hospitalId, _hash) {
        try {
          const response = await fetch('/EMRsharing/updateHash', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              userId: uid,
              hospitalId: _hospitalId,
              hash: _hash
              // ...other data...
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          console.log('Success:', data);
          alert(data["result"]["success"]);
          location.reload() ;
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // updateInstance()

      async function consent(uid, org) {
        try {
          const response = await fetch('/EMRsharing/consent', {
            method: 'POST', // or 'GET', 'PUT', etc.
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              userId: uid,
              hospitalId: org
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          alert(data["result"]["success"]);
          location.reload() ;
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // consent()

      async function revoke(uid, org) {
        try {
          const response = await fetch('/EMRsharing/revoke', {
            method: 'POST', // or 'GET', 'PUT', etc.
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              userId: uid,
              hospitalId: org
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          alert(data["result"]["success"]);
          location.reload() ;
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // revoke()

      async function authorization(patientId, patientPublicKey, patientSignature, doctorPublicKey, doctorSignature, requestId) {
        try {
          const response = await fetch('/EMRsharing/authorization', {
            method: 'POST', // or 'GET', 'PUT', etc.
            headers: {
              'Content-Type': 'application/json',
              // 'Authorization': 'Bearer ' + token // if you use token-based authentication
            },
            body: JSON.stringify({
              patientId: patientId,
              patientPublicKey: patientPublicKey,
              patientSignature: patientSignature,
              doctorPublicKey: doctorPublicKey,
              doctorSignature: doctorSignature,
              requestId: requestId
            })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json(); // parse the response as JSON
          alert(JSON.stringify(data["result"]));
          // location.reload() ;
        } // try 
        catch (error) {
          console.error('Error:', error);
        } // catch
      } // revoke()

      const userIdElement = document.getElementById("userID");
      const RoleElement = document.getElementById("Role");
      const userMessageElement = document.getElementById("user-info-message");
      const hospitalIdInput_1 = document.getElementById("hospitalIdInput-1");
      const pointerInput = document.getElementById("pointerInput");
      const hashInput_1 = document.getElementById("hashInput-1");
      const hospitalIdInput_2 = document.getElementById("hospitalIdInput-2");
      const hashInput_2 = document.getElementById("hashInput-2");
      const patientPublicKeyInput = document.getElementById("patientPublicKeyInput");
      const patientSignatureInput = document.getElementById("patientSignatureInput");
      const doctorPublicKeyInput = document.getElementById("doctorPublicKeyInput");
      const doctorSignatureInput = document.getElementById("doctorSignatureInput");
      const patientIdInput = document.getElementById("patientIdInput");
      const requestHospitalIdInput = document.getElementById("requestHospitalIdInput");
      document.addEventListener('DOMContentLoaded', function() {
        hospitalIdInput_1.value = "" ;
        pointerInput.value = "" ;
        hashInput_1.value = "" ; 
        hospitalIdInput_2.value = "" ;
        hashInput_2.value = "" ; 
        consentSelect.selectedIndex = 0 ;
        revokeSelect.selectedIndex = 0 ;
        patientPublicKeyInput.value = "" ;
        patientSignatureInput.value = "" ;
        doctorPublicKeyInput.value = "" ;
        doctorSignatureInput.value = "" ;
      });

      ReloadButton.addEventListener("click", async function() {
        location.reload() ;
      });

      consentSelect.addEventListener('change', (event) => {
        consentOption = event.target.value;
      });

      revokeSelect.addEventListener('change', (event) => {
        revokeOption = event.target.value;
      });

      updateInsatnceButton.addEventListener("click", async function() {
        if ( !hospitalIdInput_1.value || !pointerInput.value || !hashInput_1.value )
          alert("Input the essential infomation first!!") ;
        else { 
          const hid = hospitalIdInput_1.value ;
          const pt = pointerInput.value ;
          const ha = hashInput_1.value ;
          updateInstance(userId, hid, pt, ha) ; 
          //- location.reload();
        } // else   
      }) ;

      updateHashButton.addEventListener("click", async function() {
        if ( !hospitalIdInput_2.value || !hashInput_2.value )
          alert("Input the essential infomation first!!") ;
        else 
          updateHash(userId, hospitalIdInput_2.value, hashInput_2.value) ;
      }) ;

      consentButton.addEventListener("click", async function() {
        if ( consentSelect.selectedIndex == 0 )
          alert("Please select the hospital!!") ;
        else 
          consent(userId, consentOption) ;
      }) ;

      revokeButton.addEventListener("click", async function() {
        if ( revokeSelect.selectedIndex == 0 )
          alert("Please select the hospital!!") ;
        else 
          revoke(userId, revokeOption) ;
      }) ;

      patientConnectButton.addEventListener("click", async function() {
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum) ;
          await provider.send("eth_requestAccounts", []);
          const signer = provider.getSigner() ;
          const userAddress = await signer.getAddress() ;
          patientPublicKeyInput.value = userAddress;
        } // if 
        else 
          alert('Please download Metamask');
      }) ;

      patientSignButton.addEventListener("click", async function(){
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum);
          const signer = provider.getSigner();
          let message = ethers.utils.toUtf8Bytes("message") ;
          const signature = await signer.signMessage(message) ;
          patientSignatureInput.value = signature ;
        } // if 
        else 
          alert('Please download Metamask');
      }) ;

      doctorConnectButton.addEventListener("click", async function() {
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum) ;
          await provider.send("eth_requestAccounts", []);
          const signer = provider.getSigner() ;
          const userAddress = await signer.getAddress() ;
          doctorPublicKeyInput.value = userAddress;
        } // if 
        else 
          alert('Please download Metamask');
      }) ;

      doctorSignButton.addEventListener("click", async function() {
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum);
          const signer = provider.getSigner();
          let message = ethers.utils.toUtf8Bytes("message") ;
          const signature = await signer.signMessage(message) ;
          doctorSignatureInput.value = signature ;
        } // if 
        else 
          alert('Please download Metamask');
      }) ;

      authorizationButton.addEventListener("click", async function(){
        if ( !patientIdInput.value || !requestHospitalIdInput.value )
          alert("Please input the message!!") ;
        else 
          authorization(patientIdInput.value, patientPublicKeyInput.value, patientSignatureInput.value, doctorPublicKeyInput.value
                        , doctorSignatureInput.value, requestHospitalIdInput.value) ;
      }) ;

      const queryParams = new URLSearchParams(window.location.search);
      // Get the values of the variables from the query parameters
      const userId = queryParams.get('userId');
      const role = queryParams.get('role');
      //- if (userId)
      //-   userIdElement.textContent = userId ;
      //- if (role)
      //-   RoleElement.textContent = role ;
      if (userId && role) {
        //- userId = userIdElement.textContent ;
        userMessageElement.textContent = "Please Enjoy!!" ;
        getACL(userId);
      } // if 

      
