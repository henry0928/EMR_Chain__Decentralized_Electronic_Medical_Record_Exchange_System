doctype html
html
  head
    title Create App-chain Identity
    link(rel='stylesheet' href='stylesheets/createIdentity.css')
    link(rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css')
    script(src='https://cdn.ethers.io/lib/ethers-5.2.umd.min.js' type='application/javascript')
    script(src='javascripts/abiScripts.js')
  body
    .container
      h1 Create App-chain Identity
      form#bindAccountForm(action='/createIdentity', method='POST')
        label(for='walletAddressInput') Wallet Address:
        input#walletAddressInput(type='text' name='walletAddressInput' readonly='' required='')
        br
        label(for='DIDInput') DID:
        input#DIDInput(type='text' name='DIDInput' readonly='' required='')
        button#connectButton(type='button') Login for sign signature
          img(src='images/MetaMask_Horizontal.svg', alt='MetaMask Logo')
          | 
        br
        br
        button#SignButton(type='button') Sign
        br
        br
        label(for='messageHashInput') messageHash:
        input#messageHashInput(type='text' name='messageHashInput' readonly='' required='')
        br
        label(for='signatureInput') Signature:
        input#signatureInput(type='text' name='signatureInput' readonly='' required='')
        label
          input(type="checkbox" id="checkbox1" name="option1" value="Option 1" onclick="toggleInput()")
          | Input the user defined key to encrypt.
        label
          input(type="checkbox" id="checkbox2" name="option2" value="Option 2")
          | Use default setting to encrypt(app-chain id private-key)
        input(type="password" id="userKey" name="userKey" style="display: none;")
        button(type='submit') Create Identity
    script.
      const IDcontractAddress = '0xE6042703475D0dd1bC2eB564a55F1832c2527171'; // IdentityManagement contract address
      const connectButton = document.getElementById("connectButton");
      const walletAddressInput = document.getElementById("walletAddressInput");
      const DIDInput = document.getElementById("DIDInput");
      const messageInput = document.getElementById("messageInput");
      const messageHashInput = document.getElementById("messageHashInput");
      const signatureInput = document.getElementById("signatureInput");
      function toggleInput() {
        var checkbox = document.getElementById('checkbox1');
        var input = document.getElementById('userKey');
        input.style.display = checkbox.checked ? 'block' : 'none';
      } // toggleInput()
      connectButton.addEventListener("click", async function() {
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum) ;
          await provider.send("eth_requestAccounts", []);
          const signer = provider.getSigner() ;
          const userAddress = await signer.getAddress() ;
          walletAddressInput.value = userAddress;
          const contract = new ethers.Contract(IDcontractAddress, IdentityManagerAbi, signer);
          try {
            DIDInput.value = await contract.getId(); 
          } // try 
          catch (error) {
            alert(error) ;
          } // catch
        } // if 
        else 
          alert('Please download Metamask');
      });

      SignButton.addEventListener("click", async function() {
        if (window.ethereum) {
          const provider = new ethers.providers.Web3Provider(window.ethereum);
          const signer = provider.getSigner();
          const contract = new ethers.Contract(IDcontractAddress, IdentityManagerAbi, signer);
          const messageHash = ethers.utils.hashMessage("message");
          const signature = await signer.signMessage(ethers.utils.arrayify(messageHash));
          messageHashInput.value = messageHash;
          signatureInput.value = signature;
        } // if 
        else 
          alert('Please download Metamask');
      });